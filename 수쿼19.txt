#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
#include <set>
#define all(v) v.begin(), v.end()
#define pii pair<int,int>
#define make_unique(v) v.erase(unique(v.begin(), v.end()), v.end())
typedef long long ll;
using namespace std;

int n, m;
vector<ll> arr,  divLazy, addLazy;
vector<pair<ll, ll>> tree;
pair<ll, ll> init(int i,int l,int r) {
    if (l == r) return tree[i] =  make_pair(arr[l],arr[l]);
    int m = (l + r) / 2;
    pair<ll, ll>  L = init(2 * i, l, m);
    pair<ll, ll>  R = init(2 * i + 1, m + 1, r);
    return tree[i] = make_pair(L.first+R.first,min(L.second,R.second));
}

void update_lazy(int i, int l, int r) {
    if (addLazy[i] == 0 && divLazy[i] == 1) return;
    if(l!=r)  {
        for (int j = 2 * i;j <= 2 * i + 1;j++) {


          addLazy[j] = floor(addLazy[j]*1.0 / divLazy[i])  + addLazy[i];
           divLazy[j] = divLazy[j] * divLazy[i] ;
        }
      
    }
    tree[i] = make_pair(floor(tree[i].first * 1.0 / divLazy[i]) + ((r - l + 1) * addLazy[i]),
        floor(tree[i].second * 1.0 / divLazy[i]) + ((r - l + 1) * addLazy[i]));

    addLazy[i] = 0;divLazy[i] = 1;
    return;
}

void update_range(int i, int l, int r, int L, int R, ll div, ll add) {
    update_lazy(i, l, r);
    if (r < L || R < l) return;
    if (L <= l && r <= R) {

    addLazy[i] = floor(addLazy[i]*1.0 / div ) + add;
      divLazy[i] = divLazy[i] * div ;

        update_lazy(i, l, r);
        return;
    }
    int m = (l + r) / 2;
    update_range(2 * i, l, m, L, R, div, add);
    update_range(2 * i + 1, m + 1, r, L, R, div, add);
    tree[i] = make_pair((tree[2 * i].first + tree[2 * i + 1].first),min(tree[2 * i].second ,tree[2 * i + 1].second)) ;
    return;
}

ll query_min(int i, int l, int r, int L, int R) {
    update_lazy(i, l, r);
    if (r < L || R < l) return INT_MAX;
    if (L <= l && r <= R) return tree[i].second;
    int m = (l + r) / 2;
    return min(query_min(2 * i, l, m, L, R), query_min(2 * i + 1, m + 1, r, L, R));
}
ll query_sum(int i, int l, int r, int L, int R) {
    update_lazy(i, l, r);
    if (r < L || R < l) return 0;
    if (L <= l && r <= R) return tree[i].first;
    int m = (l + r) / 2;
    return query_sum(2 * i, l, m, L, R) + query_sum(2 * i + 1, m + 1, r, L, R);
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m;
    arr.resize(n);tree.resize(4 * n);divLazy.resize(4 * n, 1);addLazy.resize(4 * n, 0);
    for (int i = 0;i < n;i++) cin >> arr[i];
    init(1, 0, n - 1);
    int order, L, R;
    ll val;
    for (int i = 0;i < m;i++) {
        cin >> order >> L >> R;
        if (order == 1) {
            cin>> val;
            update_range(1, 0, n - 1, L , R , 1, val);
        }
        else if (order == 2) {
            cin >> val;
            update_range(1, 0, n - 1, L, R , val, 0);     
        }
        else if (order == 3) cout << query_min(1, 0, n - 1, L , R ) << '\n';  
        else  cout << query_sum(1, 0, n - 1, L , R ) << '\n';   
    }
    return 0;
}