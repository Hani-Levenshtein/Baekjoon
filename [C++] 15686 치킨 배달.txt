#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

int n, m;
int arr[50][50];
vector<pii> home,store,visited;
bool chk[13];
int res = INT_MAX;

void dfs(int in,int out) {
	if (out == m) {
		int ret = 0;
		for (int i = 0;i < home.size();i++) {
			int sum = INT_MAX;
			for (int j = 0;j < visited.size();j++)
				sum = min(sum, abs(home[i].first - visited[j].first) + abs(home[i].second - visited[j].second));
			ret += sum;
		}
		res=min(res,ret);
		return;
	}
	for (int i = in;i < store.size();i++) {
		if (chk[i] == false) {
			chk[i] = true;
			visited.push_back(store[i]);

			dfs(i, out + 1);
			chk[i] = false;
			visited.pop_back();
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;

	for (int i = 0;i < n;i++)
		for (int j = 0;j < n;j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 1) home.push_back(make_pair(i, j));
			if (arr[i][j] == 2) store.push_back(make_pair(i, j));
		}

	dfs(0, 0);
	cout << res;

	return 0;
}