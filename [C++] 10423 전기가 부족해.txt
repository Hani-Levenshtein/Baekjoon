#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
#include <set>
#include <map>
#include <unordered_map>
#include <sstream>
#include <cstdlib>
#define all(v) v.begin(), v.end()
#define pii pair<int, int>
#define make_unique(v) v.erase(unique(v.begin(), v.end()), v.end())
typedef long long ll;
using namespace std;


int V, E,K, u, v, w;
struct Edge {
	int cost, node[2];
	Edge(int cost,int u,int v) {
		this->cost = cost;
		this->node[0] = u;
		this->node[1] = v;
	}
	bool operator<(Edge e) {
		return this->cost < e.cost;
	}

};
vector<Edge> edge;
vector <int> Parent, Rank, station;

int findParent(int u)
{
	if (Parent[u] == u) return u;
	return Parent[u] = findParent(Parent[u]);
}

void mergeParent(int u, int v)
{
	u = findParent(u);
	v = findParent(v);
	if (u == v)return;
	if (Rank[u] > Rank[v]) swap(u, v);
	Parent[u] = v;
	if (Rank[u] == Rank[v]) Rank[v]++;
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> V>> E>>K;
	Rank.resize(V+1, 1);
	Parent.resize(V+1);
	station.resize(K);
	for (int i = 1;i <= V;i++)Parent[i] = i;

	for (int i = 0;i < K;i++) {
		cin >> station[i];
		if (i!=0) mergeParent(station[0], station[i]);
	}

	for (int i = 0;i < E;i++) {
		cin >> u >> v >> w;
		edge.push_back(Edge(w, u, v));
	}

	sort(all(edge));
	int res = 0;
	for (int i = 0;i < (int)edge.size();i++) {
		int cost = edge[i].cost;
		int L = edge[i].node[0];
		int R = edge[i].node[1];
		if (findParent(L) == findParent(R))continue;
		else {
			mergeParent(L, R);
			res += cost;
		}
	}
	cout<< res;
	return 0;
}