#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
typedef long long ll;
using namespace std;
int n, m, k;
vector<ll> tree, arr;
void input() {
	cin >> n >> m >> k;
	arr.resize(n);
	tree.resize(4 * n);
	for (int i = 0;i < n;i++) cin >> arr[i];
}

ll init(vector<ll>& v, vector<ll>& t, int i, int S, int E) {
	if (S == E) return tree[i] = v[S];
	else return tree[i] = init(v, t, 2 * i, S, (S + E) / 2)
		+ init(v, t, 2 * i + 1, (S + E) / 2 + 1, E);
}

void update(vector<ll>& v, vector<ll>& t, int i, int S, int E, int idx, ll gap) {
	if (idx < S || E < idx) return;
	t[i] += gap;
	if (S != E) {
		update(v, t, 2 * i, S, (S + E) / 2, idx, gap);
		update(v, t, 2 * i + 1, (S + E) / 2 + 1, E, idx, gap);
	}
}
ll query(vector<ll>& v, vector<ll>& t, int i, int S, int E, int L, int R) {
	if (E < L || R < S) return 0;
	if (L <= S && E <= R) return t[i];
	return query(v, t, 2 * i, S, (S + E) / 2, L, R)
		+ query(v, t, 2 * i + 1, (S + E) / 2 + 1, E, L, R);
}

void output() {
	int a, b, c;
	ll d;
	for (int i = 0;i < m + k;i++) {
		cin >> a;
		if (a == 1) {
			cin >> b >> d;
			update(arr, tree, 1, 0, n - 1, b - 1, d - arr[b - 1]);
			arr[b - 1] = d;
		}
		else {
			cin >> b >> c;
			cout << query(arr, tree, 1, 0, n - 1, b - 1, c - 1) << '\n';
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	input();
	init(arr, tree, 1, 0, n - 1);
	output();
	return 0;
}