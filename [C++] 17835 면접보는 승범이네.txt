#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
#include <set>
#include <map>
#include <unordered_map>
#include <sstream>
#include <cstdlib>
#define all(v) v.begin(), v.end()
#define pii pair<int, int>
#define pli pair<ll, int>
#define make_unique(v) v.erase(unique(v.begin(), v.end()), v.end())
typedef long long ll;
using namespace std;

int V,E,K,u,v;
ll w;

vector<pli> arr[100001];
priority_queue<pli,vector<pli>,greater<pli>> pq;
vector<ll> dist(100001,LONG_LONG_MAX);

void dijkstra(){

    while(!pq.empty()){
        ll cost = pq.top().first;
        int here = pq.top().second;
        pq.pop();
        if(dist[here]<cost) continue;
        
        for(auto there : arr[here]){
            ll nextcost = there.first + cost;
            int nextnode = there.second;
            
            if(dist[nextnode]>nextcost){
                dist[nextnode]=nextcost;
                pq.push({nextcost,nextnode});
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>V>>E>>K;
    
    for(int i=0;i<E;i++){
        cin>>u>>v>>w;
        arr[v].push_back({w,u});
    }
    
    for(int i=0;i<K;i++){
        cin>>u;
        pq.push({0LL,u});
        dist[u]=0LL;
    }
    
    dijkstra();
    int idx=0;
    ll cost=INT_MIN;
    
    for(int i=1;i<=V;i++){
        if(cost<dist[i]){
            cost=dist[i];
            idx=i;
        }
    }
    cout<<idx<<'\n'<<cost<<'\n';
    return 0;
}
