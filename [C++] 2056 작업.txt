#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
#include <set>
#include <sstream>
#define all(v) v.begin(), v.end()
#define pii pair<int,int>
#define make_unique(v) v.erase(unique(v.begin(), v.end()), v.end())
typedef long long ll;
using namespace std;

int inDegree[10001], time[10001], accumulatedTime[10001];
queue<int> q;
vector<int> graph[10001];

void topologicalSort() {

	while (q.empty()!=true) {
		int here = q.front(); 
		q.pop();
		for (auto next : graph[here]) {
			accumulatedTime[next] = max(accumulatedTime[next], accumulatedTime[here] + time[next]);
			if (--inDegree[next] == 0) q.push(next);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int n,e; cin >> n;
	for (int i = 1; i <= n; i++) {
		int dt, E;
		cin >> dt >> E;
		time[i] = dt;
		inDegree[i] = E;
		if (E == 0) {
			q.push(i);
			accumulatedTime[i] = dt;
		}
		for (int j = 0; j < E; j++) {
			cin >> e;
			graph[e].push_back(i);
		}
	}

	topologicalSort();

	int res = INT_MIN;
	for (int i = 1; i <= n; i++) res = max(res, accumulatedTime[i]);
	cout << res;

	return 0;
}
