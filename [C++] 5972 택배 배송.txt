#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
using namespace std;
int v, e, start,desti, s, d, weight;
vector <pair<int, int>> adj[50000];
vector<int> dijkstra(int src) {
	priority_queue <pair<int, int> > pq;
	vector<int> dist(v, INT_MAX);
	dist[src] = 0;
	pq.push({ 0,src });
	while (pq.empty() != true) {
		int cost = -pq.top().first;
		int here = pq.top().second;
		pq.pop();
		if (dist[here] < cost) continue;
		for (int i = 0;i < (int)adj[here].size();i++) {
			int there = adj[here][i].first;
			int nextdist = cost + adj[here][i].second;
			if (dist[there] > nextdist) {
				dist[there] = nextdist;
				pq.push({ -nextdist,there });
			}
		}
	}
	return dist;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> v>> e;
	for (int i = 0;i < e;i++) {
		cin >> s >> d >> weight;
		adj[s-1].push_back(make_pair(d-1, weight));
		adj[d - 1].push_back(make_pair(s - 1, weight));
	}

	cout << dijkstra(0)[v - 1];
	return 0;
}