#include <iostream>
#include <utility>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;
int arr[101][101] = { 0 };
int num[101][101];
bool check[101][101] = { false };
pair<int, int>direction[4] = { {-1,0},{1,0},{0,1} ,{0,-1} };
queue<pair<int, int> > q;
void bfs(int n,int m) {
	while (q.empty() != true) {
		pair<int, int> p = q.front();
		q.pop();
		for (int a = 0;a < 4;a++)
			if (arr[p.first + direction[a].first][p.second + direction[a].second] == 1 &&
				check[p.first + direction[a].first][p.second + direction[a].second] == false)
			{
				q.push({ p.first + direction[a].first, p.second + direction[a].second });
				check[p.first + direction[a].first][p.second + direction[a].second] = true;
				num[p.first + direction[a].first][p.second + direction[a].second] = num[p.first][p.second] + 1;
			}
	}
	return;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n,m;
	string s;
	cin >> n >> m;
	for (int i = 1;i <= n;i++) {
		cin >> s;
		for (int j = 1;j <= m;j++)
			arr[i][j] = s[j-1]-'0';
	}
	q.push({ 1,1 });
	check[1][1] = true;
	num[1][1] = 1;
	bfs(n,m);
	cout << num[n][m];
	return 0;
}
