#include <iostream>
#include <algorithm>
#include <queue>
#include <string>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string.h>
#include <set>
#include <map>
#include <unordered_map>
#include <sstream>
#include <cstdlib>
#include <cassert>
#define all(v) v.begin(), v.end()
#define pii pair<int, int>
#define pli pair<ll, int>
#define make_unique(v) sort(all(v)), v.erase(unique(all(v)), v.end())
typedef long long ll;
using namespace std;


string s,d;
string n, m;
int k;
bool chk[2000000];
int mSum,thereSum,nSum;
int sum=0,minCnt;
int limit,zerochk,pluschk,minuschk;

int bfs() {
    bool flag;
    queue <string> q;
    int cnt=0;
    memset(chk,false,sizeof(chk));
    
    chk[stoi(n)]=true;
    q.push(n);
    
    while ((q.empty() != true)) {
        cnt++;
        int QSIZE = (int)q.size();
        for(int j=0;j<QSIZE;j++){
            
            string here = q.front();
            q.pop();
            
            for(int idx = 1; idx<=7-k;idx++){
                string there = here;
                flag = false;
                for(int i=0;i<k;i++){
                    if (s[i] == '+'){
                       if (there[i+idx] == '9')  {flag = true;}
                       else {there[i+idx] = there[i+idx]+1;}
                    }
                    if (s[i] == '-'){
                        if (there[i+idx] == '0')  {flag = true;}
                        else {there[i+idx] = there[i+idx]-1;}
                   }
                }
                if (flag==true) continue;
                if (chk[stoi(there)]==false ) {
                    chk[stoi(there)]=true;
                    if (there == m) return cnt;
                    q.push(there);
                }
                
            }

            for(int idx = 1; idx<=7-k;idx++){
                string there = here;
                flag = false;
                for(int i=0;i<k;i++){
                    if (d[i] == '+'){
                       if (there[i+idx] == '9')  {flag = true;}
                       else {there[i+idx] = there[i+idx]+1;}
                    }
                    if (d[i] == '-'){
                        if (there[i+idx] == '0')  {flag = true;}
                        else {there[i+idx] = there[i+idx]-1;}
                   }
                }
                if (flag==true) continue;
                if (chk[stoi(there)]==false ) {
                    chk[stoi(there)]=true;
                    if (there == m) return cnt;
                    q.push(there);
                }
            }
        }
      
    }
    return -1;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    int c=1;
    cin >> t;
    while (t--) {
        cin >> n >> m >> k;
        cin >> s;
        d = s;
        while (n.size() < 6) n = "0" + n;
        while (m.size() < 6) m = "0" + m;
        n="1"+n;
        m="1"+m;
        nSum=0;mSum=0;
        for(int i=1;i<=6;i++) nSum += n[i];
        for(int i=1;i<=6;i++) mSum += m[i];
        
        zerochk=0;pluschk=0;minuschk=0;
        for (int i=0; i < k; i++){
            d[i] = s[k - i - 1];
            if (d[i]=='+') pluschk++;
            if (d[i]=='-') minuschk++;
            if (d[i]=='0') zerochk++;
        }
        sum = pluschk - minuschk;
        int gap = mSum-nSum;

        if (n.compare(m)==0) {
            minCnt = 0;
  
        }
        else if (zerochk==k){
            minCnt = -1;
        }
        else if ((gap>0 && sum>0 && (abs(gap)%abs(sum))==0) || (gap<0 && sum<0 && (abs(gap)%abs(sum))==0)){
            if ((pluschk==1 && minuschk==0 && zerochk<=1) || (pluschk==0 && minuschk==1 && zerochk<=1)){
                minCnt = abs(gap);
            }
            else{
                minCnt = bfs();
            }
        }
        else if (gap==0 && sum==0){
            minCnt = bfs();
        }
        else {
            minCnt = -1;
        }
        //cout<<"#"<<c++<<" "<<minCnt<<" "<<asd<<'\n';
        cout<<"#"<<c++<<" "<<minCnt<<'\n';
    }
    return 0;
}
