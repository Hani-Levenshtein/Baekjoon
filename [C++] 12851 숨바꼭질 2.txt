#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
typedef long long ll;
using namespace std;
int arr[100001];
bool check[100001];
void bfs(int n, int k) {
	queue<int> q, t,r;
	q.push(n);
	int cnt = 0;
	arr[n] = 1;
	check[n] = true;
	while (q.empty() != true) {
		while (q.empty() != true) {
			t.push(q.front());
			q.pop();
		}
		while (t.empty() != true) {
			int temp = t.front();
			t.pop();
			if (temp == k) {
				cout << cnt << '\n' << arr[temp];
				return;
			}
			if ((temp + 1 <= 100000 && arr[temp + 1] == 0)) {
				for(int i=0;i<arr[temp];i++)r.push(temp + 1);
				if (check[temp + 1] == false) {
					q.push(temp + 1);
					check[temp + 1] = true;
				}
			}
			if ((0 <= temp - 1 && arr[temp - 1] == 0) ) {
				for (int i = 0;i < arr[temp];i++)r.push(temp - 1);
				if (check[temp - 1] == false) {
					q.push(temp - 1);
					check[temp - 1] = true;
				}
			}
			if ((2 * temp <= 100000 && arr[2 * temp] == 0) ) {
				for (int i = 0;i < arr[temp];i++)r.push(2 * temp);
				if (check[2*temp ] == false) {
					q.push(2*temp );
					check[2*temp ] = true;
				}
			}
			
		}
		while (r.empty() != true) {
			arr[r.front()]++;
			r.pop();
		}
		cnt++;
	}

	return;
}
int main() {
	ios_base::sync_with_stdio(false), cin.tie(nullptr);
	int n, k;
	cin >> n >> k;
	bfs(n, k);
	return 0;
}