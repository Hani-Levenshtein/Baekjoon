#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
#include <set>
#include <map>
#include <unordered_map>
#include <sstream>
#include <cstdlib>
#define all(v) v.begin(), v.end()
#define pii pair<int, int>
#define pli pair<ll, int>
#define make_unique(v) sort(all(v)), v.erase(unique(all(v), v.end())
typedef long long ll;
using namespace std;
 
vector<int> ground, sky;
int n, m;
int obstacleNumber = INT_MAX, obstacleCount, cnt = 0;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> n >> m;
    ground.resize(n/2);
    sky.resize(n/2);
    for (int i = 0; i < n/2; i++) cin >> ground[i] >> sky[i];
        
    sort(all(ground));
    sort(all(sky));

    for (int i = 1; i <= m; i++) {
        obstacleCount = -((lower_bound(all(ground), i ) - ground.end()) + (lower_bound(all(sky), m+1-i ) - sky.end()));
    
        if (obstacleNumber ==  obstacleCount) cnt++;
        else if (obstacleNumber > obstacleCount) {
            obstacleNumber = obstacleCount;
            cnt = 1;
        }
    }

    cout << obstacleNumber <<  " " << cnt << '\n';
    return 0;
}
