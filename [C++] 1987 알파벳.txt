#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
typedef long long ll;
using namespace std;
#define all(v) v.begin(),v.end()

int n, m;
int arr[22][22];
bool chk[22][22];
vector<bool> brr;
struct dots {
	int y, x;
};
int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,1,-1 };
int res = 0;
void dfs(int x,int y,int k) {
	res = max(res, k);
	for(int i=0;i<4;i++)
		if(arr[x+dx[i]][y + dy[i]]!=-1)
			if (brr[arr[x + dx[i]][y + dy[i]]] == false) {
				brr[arr[x + dx[i]][y + dy[i]]] = true;
				dfs(x + dx[i], y + dy[i], k + 1);
				brr[arr[x + dx[i]][y + dy[i]]] = false;
			}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;
	string s;
	memset(arr, -1, sizeof(arr));
	for (int i = 1;i <= n;i++) {
		cin >> s;
		for (int j = 1;j <= m;j++)
			arr[i][j] = s[j - 1]-'A';
	}

	brr.resize(26), brr[arr[1][1]] = true;
	dfs(1,1,1);
	cout << res;
	return 0;
}