#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
#define all(v) v.begin(), v.end()
#define pii pair<int,int>
typedef long long ll;
using namespace std;
int n, m,sqrtn;
int arr[100001];
int cnt[100001];
int cntOfcnt[100001];
int maxcount = 0;
void add(int a) {
	if (cnt[a] != 0) cntOfcnt[cnt[a]]--;
	cnt[a]++;
	cntOfcnt[cnt[a]]++;
	if (cnt[a] > maxcount) maxcount = cnt[a];
}

void sub(int a) {
	cntOfcnt[cnt[a]]--;
	if (cnt[a] == maxcount && cntOfcnt[cnt[a]] == 0) maxcount--;
	cnt[a]--;
	cntOfcnt[cnt[a]]++;
}

struct query {
	int idx, i, j;
};
bool compare(query& x,query& y) {
	if (x.i / sqrtn != y.i / sqrtn) return x.i / sqrtn < y.i / sqrtn;
	return x.j < y.j;
}
vector<query> q;
vector<int>res;
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	sqrtn = (int)sqrt(n);
	for (int i = 0;i < n;i++)cin >> arr[i];
	cin >> m;
	q.resize(m);
	res.resize(m);
	int x, y;
	for (int a = 0;a < m;a++) {
		cin >> x >> y;
		q[a] = {a,x-1,y-1};
	}

	sort(q.begin(), q.end(),compare);

	int s = q[0].i, e = q[0].j;
	for (int a = s;a <= e;a++) add(arr[a]);
	res[q[0].idx] = maxcount;

	for (int a = 1;a < m;a++) {
		while (q[a].i < s)add(arr[--s]);
		while (q[a].j > e)add(arr[++e]);
		while (q[a].i > s)sub(arr[s++]);
		while (q[a].j < e)sub(arr[e--]);
		res[q[a].idx] = maxcount;
	}
	for (int i = 0;i < m;i++) cout << res[i] << '\n';
	return 0;
}
