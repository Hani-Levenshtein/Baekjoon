#include <iostream>
#include <algorithm>
#include <queue>
#include <string>
#include <deque>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string.h>
#include <set>
#include <map>
#include <unordered_map>
#include <sstream>
#include <cstdlib>
#include <cassert>
#define all(v) v.begin(), v.end()
#define pii pair<int, int>
#define pli pair<ll, int>
#define make_unique(v) sort(all(v)), v.erase(unique(all(v)), v.end())
typedef long long ll;
using namespace std;

int parent[1000001];
 
int findRoot(int x){
    if(x == parent[x]) return x;
    return parent[x] = findRoot(parent[x]);
}
 
void merge(int L, int R){
    L = findRoot(L);
    R = findRoot(R);
    if(L != R) parent[L] = R;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n, m, order, a, b;
    cin >> n >> m;
       
    for(int i = 0; i <= n; i++) parent[i] = i;
   
    for(int i = 0; i < m; i++){
       cin >> order >> a >> b;
       if(order == 0) merge(a, b);
       else {
           if(findRoot(a) == findRoot(b)) cout << "yes" << '\n';
           else cout << "no" << '\n';
       }
   }

    return 0;
}
