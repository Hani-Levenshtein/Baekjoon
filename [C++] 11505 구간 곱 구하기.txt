#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
typedef long long ll;
using namespace std;
#define mod 1000000007
int n, m, k;
vector<ll> tree,arr;
void input() {
	cin >> n >> m >> k;
	arr.resize(n);
	tree.resize(4 * n);
	for (int i = 0;i < n;i++) cin >> arr[i];
}

ll init(int i,int S,int E) {
	if (S == E) return tree[i] = arr[S];
	else return tree[i] = (init( 2 * i, S, (S + E) / 2) %mod)
		* (init(2 * i + 1, (S + E) / 2 + 1, E) % mod) % mod;
}

ll update(int i, int S, int E, int idx,ll mul) {
	if (idx < S || E < idx) return tree[i];
	if (S == E) return tree[i] = mul;
	return tree[i]=(update(2 * i, S, (S + E) / 2, idx,mul)%mod)
		*(update(2 * i + 1, (S + E) / 2 + 1, E, idx,mul)%mod)%mod;

}
ll query( int i, int S, int E, int L, int R) {
	if (E < L || R < S) return 1;
	if (L <= S && E <= R) return tree[i];
	return (query(2 * i, S, (S + E) / 2, L, R) % mod)
		* (query(2 * i + 1, (S + E) / 2 + 1, E, L, R) % mod) % mod;
}

void output() {
	int a, b, c;
	for (int i = 0;i < m + k;i++) {
		cin >> a >> b >> c;
		if (a == 1) update(1, 0, n - 1, b - 1,c);
		else cout<<query(1, 0, n - 1, b-1 , c-1)<<'\n';
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	input();
	init(1,0,n-1);
	output();
	return 0;
}