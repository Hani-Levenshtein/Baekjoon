#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
typedef long long ll;
#define all(v) v.begin(), v.end()
#define dy first
#define dx second
using namespace std;
typedef struct dot {
	int y, x, acc, dir;
}dot;

pair<int, int> dp[4] = { {-1,0},{1,0},{0,1} ,{0,-1} };
int n;
int arr[102][102];
void bfs() {
	int res = 0;
	queue<dot>q,t;
	q.push({ 1,1,0,-1 });
	while (q.empty() != true) {
		while (q.empty() != true) {
			t.push(q.front());
			q.pop();
		}
		while (t.empty() != true) {
			dot p = t.front();
			t.pop();
			cout << p.y << " " << p.x << '\n';
			if (p.x == n && p.y == n) {
				cout << res;
				return;
			}
			for (int k = 0;k < 4;k++) {
				if (p.dir != k) {
					if (0==arr[p.y + dp[k].dy][p.x + dp[k].dx]|| 1< arr[p.y + dp[k].dy][p.x + dp[k].dx])
						q.push({ p.y + dp[k].dy,p.x + dp[k].dx,0,k });
				}
				else {
					int check = 0;
					if (dp[k].dy == 0 ) {
						if(1 <= p.x + dp[k].dx * (p.acc + 1) && p.x + dp[k].dx * (p.acc + 1) <= n
							&& (arr[p.y][p.x + dp[k].dx * (p.acc+1)]==0 || arr[p.y][p.x + dp[k].dx * (p.acc + 1)] >1))
							for (int j = 1;j <= p.acc + 1;j++)
								if ( 0 <= arr[p.y][p.x + dp[k].dx * j])
									check++;
					}
					else {
						if(1 <= p.y + dp[k].dy * (p.acc + 1) && p.y + dp[k].dy * (p.acc + 1) <= n
							&& (arr[p.y + dp[k].dy * (p.acc+1)][p.x] == 0 || arr[p.y + dp[k].dy * (p.acc + 1)][p.x] > 1))
							for (int i = 1;i <= p.acc + 1;i++)
								if ( 0 <= arr[p.y + dp[k].dy * i][p.x])
									check++;
					}

					if (check == p.acc+1) 
						q.push({ p.y + dp[k].dy * (p.acc+1),p.x + dp[k].dx * (p.acc+1),p.acc + 1,k });
				
				}
			}
		}
		for (int i = 1;i <= n;i++)for (int j = 1;j <= n;j++) {
			if (arr[i][j] == 1) arr[i][j] = -1;
			else if (arr[i][j] > 1) arr[i][j]--;
		}
		res++;
	}
	cout << "Fired";
	return;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	memset(arr, -1, sizeof(arr));
	for (int i = 1;i <= n;i++)for (int j = 1;j <= n;j++) cin >> arr[i][j];
	bfs();
	return 0;
}