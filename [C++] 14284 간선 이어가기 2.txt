#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
typedef long long ll;
using namespace std;
int n, m,u,v,w;
vector<pair<int, int>> arr[5001];
vector<int> dijkstra(int a) {
	priority_queue<pair<int, int>> pq;
	vector<int>res(n,INT_MAX);
	res[a] = 0;
	pq.push({ 0,a });
	while (pq.empty() != true) {
		int cost = -pq.top().first;
		int here = pq.top().second;
		pq.pop();
		for (int i = 0;i < arr[here].size();i++) {
			int there = arr[here][i].first;
			int nextcost = cost + arr[here][i].second;
			if (res[there] > nextcost) {
				res[there] = nextcost;
				pq.push({ -nextcost,there });
			}

		}
	}
	return res;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;
	
	for (int i = 0;i < m;i++) {
		cin >> u >> v >> w;
		arr[u - 1].push_back({ v - 1,w });
		arr[v - 1].push_back({ u - 1,w });
	}
	int a, b;
	cin >> a >> b;
	cout << dijkstra(a-1)[b-1];

	return 0;
}