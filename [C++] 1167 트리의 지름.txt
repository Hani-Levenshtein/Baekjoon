#include <iostream>
#include <algorithm>
#include <queue>
#include <string.h>
#include <limits.h>
#include <vector>
#include <math.h>
#include <stack>
#include <bitset>
#include <string>
#include <set>
#define all(v) v.begin(), v.end()
#define pii pair<int,int>
#define make_unique(v) v.erase(unique(v.begin(), v.end()), v.end())
typedef long long ll;
using namespace std;

vector<pii> v[100001];
int res[100001];
int sum[100001];
bool chk[100001];
bool chk2[100001];
void dfs(int n) {
	if (2 <= v[n].size() || n == 1) {
		int k = v[n].size();
		for (int i = 0;i < k;i++) {
			if (chk[v[n][i].first] == false) {
				chk[v[n][i].first] = true;
				dfs(v[n][i].first);
			}
		}
		vector<int>w;
		w.clear();
		for (int i = 0;i < k;i++)
			if (chk2[v[n][i].first] == true)
				w.push_back(v[n][i].second + sum[v[n][i].first]);
		sort(all(w));
		if (2 <= w.size()) res[n] = w[w.size() - 1] + w[w.size() - 2];
		else res[n] = w[w.size() - 1];
		sum[n] = w[w.size() - 1];
		chk2[n] = true;
	}

	else if (v[n].size() == 1) {
		res[n] = 0;
		sum[n] = 0;
		chk2[n] = true;
		return;
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n, a, b, k;
	cin >> n;
	for (int i = 1;i <= n;i++) {
		cin >> k;
		while (true) {
			cin >> a;
			if (a == -1) break;
			cin >> b;
			v[k].push_back({ a,b });
		}
	}

	chk[1] = true;
	dfs(1);
	int m = INT_MIN;
	for (int i = 1;i <= n;i++) {
		if (m < res[i]) m = res[i];
	}
	cout << m;

	return 0;
}